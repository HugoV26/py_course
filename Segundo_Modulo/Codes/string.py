# * Principales m√©todos de las cadenas.

# ^ Center -> str.center(width[, fillchar])

print(len("Cadena centranda den 50 caracteres"))
print("Cadena centrada en 50 caracteres".center(50))
print(len("Cadena centranda den 50 caracteres".center(50)))
print("Cadena centranda den 50 caracteres".center(50, '*'))

# ^ Rjust -> str.rjust(width[, fillchar])
# ^ Ljust -> str.ljust(width[, fillchar])
print(len("Cadena justificada a la derecha con 50 caracteres"))  
print("Cadena justificada a la derecha con 50 caracteres".rjust(50))
print("Cadena justificada a la derecha con 50 caracteres".rjust(60, '>'))

# ^ Zfill -> str.zfill(width)
# ~ Devuelve una cadena complementando el ancho rellenando con el caracter '0' a la izquierda. Si la cadena comienza con el caracter '-' o '+', el relleno comenzar√° despu√©s del mismo.

print('120'.zfill(5))
print('-120'.zfill(5))

# * Strip -> str.strip([chars])
# ~ Devuelve una cadena removiendo los caracteres iniciales y finales que se especifiquen en el par√°metro [chars]. Si no se especifica, se eliminan los espacios. En caso de especificar un valor, NO es un prefijo Ni sufijo, sino que se eliminan todas sus combinaciones.

print("     El paco     ")
print("     El paco     ".strip())
print('I want some alcohol!'.rstrip('Ialcho!'))

# * M√©todos de Conversi√≥n

# ^ Upper -> str.upper()
# ~ Devuelve una cadena con todos los caracteres en may√∫sculas

print("La paca".upper())

# ^ Lower -> str.lower()
# ~ Devuelve una cadena con todos los caracteres en min√∫sculas

print("La paca DE NUEVO".lower())

# ^ Casefold -> str.casefold()
# ~ Es m√°s agresivo que lower, algunos caracteres los convierte en su reprensentaci√≥n min√∫sculas.

print('der Flu√ü'.lower())
print('der Flu√ü'.casefold())

# ^ Swapcase -> str.swapcase()
# ~ Devuelve una cadena intercambiando los caracteres entre may√∫sculas y min√∫sculas

print("Hey, YOU wanna some Drugs?".swapcase())

# * Title -> str.title()
# ~ Cada de una las palabras comenzar√° con may√∫scula

print("el paco se parece a escobar".title())

# * Capitalize -> str.capitalize()
# ~ Primer car√°cter en may√∫scula

print("el perro es rojo".capitalize())

# * Find -> str.find(sub[, start[, end]]), str.rfind

# ~ Busca y devuelve la posici√≥n de la primera ocurrencia del par√°metro sub dentro de la cadena. Adicionalmente se pueden especificar los par√°metros start y end para acotar la b√∫squeda entre dichas posiciones. Si la b√∫squeda no es exitosa, devuelve -1.

mystr = 'Tres tristes tigres'
print('Tres tristes tigres'.find('e'))
print('Tres tristes tigres'.find('e', 3))
print(mystr.find('e', 11, len(mystr)))
print('Tres tristes tigres'.find('w'))

# * Index -> str.index(sub[, start[, end]]), str.rindex
# ~ Es similar a Find pero eleva ValueError en caso de que la b√∫squeda no sea exitosa

my_c = 'Hola mundo'
x = 2
try:
    #check = my_c.index('w', 0, 2)
    #print(check)
    print(x)
except NameError:
    print("No est√° la w :C")
else:
    print("La excepci√≥n no fue valuerror")

# M√©todos de Validaci√≥n de los strings

# * Endswith -> str.endswith(suffix [, start[, end]])
# ~ Devuelve True si la cadena termina con el sufijo especificado; de lo contrario devuevle False. El sufijo tambi√©n puede ser una tupla de sufijos para buscar. Adem√°s, se puede especificar la posici√≥n de inicio y fin para acotar la b√∫squeda.

print('www.tunerd.mx'.endswith(('.net', '.mx'), 5, 15))
print("www.tunerd.mx".endswith(""))

# * Isalpha -> str.isalpha()
# ~ Devuelve True si todos los caracteres en la cadena son alfab√©ticos y hay al menos un caracter, False en caso contrario. Los caracteres alfab√©ticos son aquellos caracteres definidos en la base de datos de caracteres Unicode como "Letra".

print('Python'.isalpha())
print('Python 3.9'.isalpha())

# * Isascii -> str.ascii()
# ~ Devuelve True si la cadena est√° vac√≠a o todos los caracteres son ASCII, False en caso contrario

print('n'.isascii())
print('√±'.isascii())

# * Isdecimal -> str.decimal()

print('3'.isdecimal())
print('-8'.isdecimal())

# * Isdigit -> str.isdigit()
# ~ Similar a isdecimal, a diferencia de que tambi+en reconoce los n√∫meros del sistema Kharosthi.

print('ê©Å'.isdigit())
print('ê©Å'.isdecimal())

# * Isnumeric -> str.isnumeric()
# ~ Similiar a isdigit pero tambi√©n reconoce fracciones vulgares de Unicode

print('\u00BD'.isnumeric())
print('¬Ω'.isnumeric())

# * Isidentifier -> str.isidentifier()
# ~ Define si puedes utilizar dicho valor como nombre de variable o si la misma corresponde a una palabra reservada de Python.

print("my-var".isidentifier())
print("my_var".isidentifier())
print("my, var".isidentifier())
print('while'.isidentifier())

# * M√©todo de uni√≥n y divisi√≥n

# * Join -> str.join(iterable)
# ~ Devuelve una cadena concatenando los elementos de un iterable (listas, tuplas, string) y serpar√°ndolos con la cadena str (a la que se aplica el m√©todo)

print(".".join(('www', 'pornhub', 'com')))

# * Partition -> str.partition(sep), str.rpartition(sep)
# ~ Devuelve una tupla de 3 elementos, donde se divide la cadena en la primer aparici√≥n del par√°metro sep

print("www.tunerd.mx".partition('.'))

# * Split -> str.split(sep=None, maxsplit=1), rsplit
# ~ Devuelve una lista de las palabras existentes en la cadena, usando el par√°metro sep como delimitador. Si se especifica maxsplit, se realizar√°n divisiones como m√°ximo, por ende, la lista tendr√° como m√°ximo maxsplit+1 elementos. Si el maxsplit no se especifica, o es -1, implica que no hay l√≠mite en el n√∫mero de divisiones, es decir que se realizan todas las divisiones posibles. Si no se especifica un separador con el par√°metro sep, la cadena ser√° divida por caracteres no imprimibles (espacios, tabulaciones, saltos de l√≠nea)

print('1\t2\n3 4'.split())
print("Hola* mundo* desde* tu* *Nerd".split('*', 2))
print('1\n2\n\n3\n4'.split('\n'))

# * Format -> str.format(*args, **kwargs)
# ~ Realiza una operaci√≥n para formatear una cadena. Cuando una cadena utiliza este m√©todo, puede tener texto literal o campos de reemplazo delimitados por llaves {}. Cada campo de reemplazo puede ser el √≠ndice num√©rico de la posici√≥n de un argumento o el nombre de la clave del argumento. El orden s√≠ importa.

print('El resultado de {0}*{1} es {2}'.format(2, 2, 2*2))
print('El resultado de {2}*{1} es {0}'.format(2, 2, 2*2))

my_var = 2
print(f'El resultado es: {my_var}*{10} es {my_var*10}')
print("El resultado es: ", my_var)
print(f"El resultado es: {my_var}")